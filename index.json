[{"categories":["documentation"],"content":"数据排列具有单调性的栈。","date":"2021-07-12","objectID":"/%E5%8D%95%E8%B0%83%E6%A0%88/","tags":["Data Structures and Algorithms"],"title":"数据结构与算法 - 单调栈","uri":"/%E5%8D%95%E8%B0%83%E6%A0%88/"},{"categories":["documentation"],"content":"性质 单调递减栈，能表示入栈元素左边第一个比它大的元素。入栈表明本身比栈顶小，出栈表面本身比栈顶大； 单调递增栈，能表示入栈元素左边第一个比它小的元素。入栈表明本身比栈顶大，出栈表面本身比栈顶小； ","date":"2021-07-12","objectID":"/%E5%8D%95%E8%B0%83%E6%A0%88/:0:1","tags":["Data Structures and Algorithms"],"title":"数据结构与算法 - 单调栈","uri":"/%E5%8D%95%E8%B0%83%E6%A0%88/"},{"categories":["documentation"],"content":"例题 - 接雨水https://leetcode-cn.com/problems/trapping-rain-water/ 接雨水\r class Solution: def trap(self, height: List[int]) -\u003e int: if len(height) == 0: return 0 sumArea = 0 stack = [] for right in range(len(height)): while stack and height[stack[-1]] \u003c height[right]: if len(stack) \u003e= 2: bottom = stack.pop() left = stack[-1] waterHeight = min(height[right], height[left]) - height[bottom] waterWidth = right - left - 1 currArea = waterHeight*waterWidth sumArea += currArea else: stack.pop() stack.append(right) return sumArea ","date":"2021-07-12","objectID":"/%E5%8D%95%E8%B0%83%E6%A0%88/:0:2","tags":["Data Structures and Algorithms"],"title":"数据结构与算法 - 单调栈","uri":"/%E5%8D%95%E8%B0%83%E6%A0%88/"}]